# -*- coding: utf-8 -*-
"""DICO_analisis_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ihT4ZzIvN1w_Z58aFxk5Y_54hChrLM7J

# **PROYEK ANALISIS DATA DICO**

---
"""

# MENYIAPKAN SEMUA LIBRARY YANG DIBUTUHKAN

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# **DATA WRANGLING**

## **Gathering Data**
"""

customers_df = pd.read_csv("https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/customers.csv")
customers_df.head()

orders_df = pd.read_csv("https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/orders.csv")
orders_df.head()

product_df = pd.read_csv("https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/products.csv")
product_df.head()

sales_df = pd.read_csv("https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/sales.csv")
sales_df.head()

"""## **Assessing Data**

### **Menilai tabel** customers_df
"""

customers_df.info()

customers_df.isna().sum()

print("Jumlah duplikasi: ", customers_df.duplicated().sum())

customers_df.describe()

"""### **Menilai tabel** orders_df"""

orders_df.info()

orders_df.nunique()

print("Jumlah duplikasi: ",orders_df.duplicated().sum())
orders_df.describe()

"""### **Menilai tabel** products_df"""

product_df.info()

print("Jumlah duplikasi: ", product_df.duplicated().sum())
product_df.describe()

"""### **Menilai tabel** sales_df"""

sales_df.info()

sales_df.isna().sum()

print("Jumlah duplikasi: ", sales_df.duplicated().sum())

print("Jumlah duplikasi: ", sales_df.duplicated().sum())
sales_df.describe()

"""## **Cleaning Data**

### **Membersihkan tabel** customers_df

DUPLICATE DATA
"""

customers_df.duplicated().sum()

customers_df.drop_duplicates(inplace=True)
print("Jumlah duplikasi: ", customers_df.duplicated().sum())

"""MISSING VALUE"""

customers_df.isna().sum()

customers_df[customers_df.gender.isna()]

customers_df.gender.value_counts()

customers_df.fillna(value="Prefer not to say", inplace=True)

customers_df.isna().sum()

customers_df.describe()

customers_df[customers_df.age == customers_df.age.max()]

customers_df.age.replace(customers_df.age.max(), 70, inplace=True)

customers_df.describe()

customers_df[customers_df.age == customers_df.age.max()]

customers_df.age.replace(customers_df.age.max(), 50, inplace=True)

customers_df.describe()

"""### **Membersihkan tabel** orders_df"""

orders_df.info()

"""MEMPERBAIKI TIPE DATA"""

datetime_columns = ["order_date", "delivery_date"]

for column in datetime_columns:
  orders_df[column] = pd.to_datetime(orders_df[column])

orders_df.info()

orders_df.head()

"""### **Membersihkan tabel** product_df

DUPLICATE DATA
"""

product_df[product_df.duplicated()]

product_df.drop_duplicates(inplace=True)

print("Jumlah duplikasi: ", product_df.duplicated().sum())

"""### **Membersihkan tabel** sales_df

MISSING VALUE
"""

sales_df.isna().sum()

sales_df[sales_df.total_price.isna()]

sales_df["total_price"] = sales_df["price_per_unit"] * sales_df["quantity"]

sales_df.isna().sum()

"""## **Menggabungkan Data**

### **Menggabungkan data** customers_df dan orders_df
"""

customers_orders_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how="outer",
    left_on="customer_id",
    right_on="customer_id"
)
customers_orders_df.head()

customers_orders_df.nunique()

customers_orders_df.isna().sum()

"""### **Menggabungkan data** sales_df dan orders_df"""

orders_sales_df = pd.merge(
    left=sales_df,
    right=orders_df,
    how="outer",
    left_on="order_id",
    right_on="order_id"
)
orders_sales_df.head()

orders_sales_df.isna().sum()

"""### **Menggabungkan data** sales_df dan product_df"""

product_sales_df = pd.merge(
    left=sales_df,
    right=product_df,
    how="outer",
    left_on="product_id",
    right_on="product_id"
)
product_sales_df.head()

product_sales_df.isna().sum()

"""# **EXPLORATORY DATA ANLYSIS (EDA)**

## **Explore** customers_df
"""

customers_df.sample(5)

customers_df.describe(include="all")

customers_df.customer_id.is_unique

customers_df.customer_id.duplicated

customers_df.groupby(by="gender").agg({
    "customer_id": "nunique",
    "age": ["max", "min", "mean", "std", ]
})

customers_df.groupby(by="city").customer_id.nunique().sort_values(ascending=False)

customers_df.groupby(by="state").customer_id.nunique().sort_values(ascending=False)

"""## **Explore** orders_df"""

orders_df.sample(5)

delivery_time = orders_df["delivery_date"] - orders_df["order_date"]
delivery_time = delivery_time.apply(lambda x: x.total_seconds())
orders_df["delivery_time"] = round(delivery_time/86400)

orders_df.sample(5)

orders_df.describe(include="all")

orders_df.delivery_time.hist()

customer_id_in_orders_df =  orders_df.customer_id
customers_df["status"] = customers_df["customer_id"].apply(lambda x: "Active" if x in customer_id_in_orders_df else "Non Active")
customers_df.sample(5)

customers_df.groupby(by="status").customer_id.count()

customers_df[customers_df.status == "Non Active"]

"""## **Explore** orders_df & customers_df

**Menggabungkan data** customers_df dan orders_df
"""

orders_customers_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how="left",
    left_on="customer_id",
    right_on="customer_id"
)
orders_customers_df.head()

orders_customers_df.groupby(by="city").order_id.nunique().sort_values(ascending=False).head(10)

orders_customers_df.groupby(by="state").order_id.nunique().sort_values(ascending=False)

orders_customers_df.groupby(by="gender").order_id.nunique().sort_values(ascending=False)

orders_customers_df["age_group"] = orders_customers_df.age.apply(lambda x: "Youth" if x <= 24 else ("Seniors" if x > 64 else "Adults"))

orders_customers_df.groupby(by="age_group").order_id.nunique().sort_values(ascending=False)

"""## **Explore** product_df"""

product_df.sample(10)

product_df.describe(include="all")

product_df.sort_values(by="price", ascending=False)

product_df.groupby(by="product_type").agg({
    "product_id": "nunique",
    "quantity": "sum",
    "price":  ["min", "max"]
})

product_df.groupby(by="product_name").agg({
    "product_id": "nunique",
    "quantity": "sum",
    "price": ["min", "max"]
})

"""## **Explore** sales_df"""

sales_df.sample(5)

sales_df.describe(include="all")

orders_df.head()

sales_df.groupby(by="order_id").total_price.sum()

"""## **Explore** sales_df & product_df

**Menggabungkan data** sales_df dan product_df
"""

sales_product_df = pd.merge(
    left=sales_df,
    right=product_df,
    how="left",
    left_on="product_id",
    right_on="product_id"
)
sales_product_df.head()

"""---
Terdapat perbedaan antara nilai price_per_unit dan price. Hal ini bisa terjadi karena adanya potongan harga, biaya operasional, atau biaya lainnya.


---
"""

sales_product_df.groupby(by="product_type").agg({
    "sales_id": "nunique",
    "quantity_x": "sum",
    "total_price": "sum"
})

sales_product_df.groupby(by="product_name").agg({
    "sales_id": "nunique",
    "quantity_x": "sum",
    "total_price": "sum"
}).sort_values(by="total_price", ascending=False)

"""## **Explore all data**

**Menghubungkan semua data**
"""

all_df = pd.merge(
    left=sales_product_df,
    right=orders_customers_df,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
all_df.head()

all_df.groupby(by=["city", "product_type"]).agg({
    "quantity_x": "sum",
    "total_price": "sum"
})

all_df.groupby(by=["state", "product_type"]).agg({
    "quantity_x": "sum",
    "total_price": "sum"
})

all_df.groupby(by=["gender", "product_type"]).agg({
    "quantity_x": "sum",
    "total_price": "sum"
})

all_df.groupby(by=["age_group", "product_type"]).agg({
    "quantity_x": "sum",
    "total_price": "sum"
})

all_df.groupby(by="state").agg({
    "order_id": "nunique",
    "total_price": "sum"
}).sort_values(by="total_price", ascending=False)

"""# **VISUALIZATION & EXPLANATORY ANALYSIS**

## **Bagaimana performa penjualan dan revenue perusahaan dalam beberapa bulan terakhir?**
"""

all_df.sample(8)

all_df.head()

"""kita ingin melakukan resample data order_date menjadi bulanan serta melakukan agregasi terhadap data tersebut untuk memperoleh informasi terkait jumlah order dan total revenue yang diperoleh tiap bulan"""

monthly_orders_df = all_df.resample(rule='M', on='order_date').agg({
    "order_id": "nunique",
    "total_price": "sum"
})
monthly_orders_df.index = monthly_orders_df.index.strftime('%B') # mengubah format order date menjadi Tahun-Bulan
monthly_orders_df = monthly_orders_df.reset_index()
monthly_orders_df.rename(columns={
    "order_id": "order_count",
    "total_price": "revenue"
}, inplace=True)
monthly_orders_df.head()

plt.figure(figsize=(10, 5))
plt.plot(
    monthly_orders_df["order_date"],
    monthly_orders_df["order_count"],
    marker='o',
    linewidth=2,
    color="#72BCD4"
)
plt.title("Number of Orders per Month (2021)", loc="center", fontsize=20)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

plt.figure(figsize=(10, 5))
plt.plot(
    monthly_orders_df["order_date"],
    monthly_orders_df["revenue"],
    marker='o',
    linewidth=2,
    color="#72BCD4"
)
plt.title("Total Revenue per Month in 2021 (AUD)", loc="center", fontsize=20)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

"""## **Produk apa yang paling banyak dan paling sedikit terjual?**"""

all_df.head()

sum_order_items_df = all_df.groupby("product_name").quantity_x.sum().sort_values(ascending=False).reset_index()
sum_order_items_df.head(15)

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(
    x="quantity_x",
    y="product_name",
    data=sum_order_items_df.head(5),
    palette=colors,
    ax=ax[0]
)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Best Performing Product", loc="center", fontsize=18)
ax[0].tick_params(axis ='y', labelsize=15)

sns.barplot(x="quantity_x", y="product_name", data=sum_order_items_df.sort_values(by="quantity_x", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Product", loc="center", fontsize=18)
ax[1].tick_params(axis='y', labelsize=15)

plt.suptitle("Best and Worst Performing Product by Number of Sales", fontsize=20)
plt.show()

"""## **Bagaimana demografi pelanggan yang kita miliki?**

### **Berdasarkan Gender**
"""

bygender_df = all_df.groupby(by="gender").customer_id.nunique().reset_index()
bygender_df.rename(columns={
    "customer_id": "customer_count"
}, inplace=True)
bygender_df

plt.figure(figsize=(10, 5))

sns.barplot(
    y="customer_count",
    x="gender",
    data=bygender_df.sort_values(by="customer_count", ascending=False),
    palette=colors
)
plt.title("Number of Customer by Gender", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()

"""### **Berdasarkan kelompok usia**"""

byage_df = all_df.groupby(by="age_group").customer_id.nunique().reset_index()
byage_df.rename(columns={
    "customer_id": "customer_count"
}, inplace=True)
byage_df

byage_df['age_group'] = pd.Categorical(byage_df['age_group'], ["Youth", "Adults", "Seniors"])

plt.figure(figsize=(10, 5))
colors_ = ["#D3D3D3", "#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(
    y="customer_count",
    x="age_group",
    data=byage_df.sort_values(by="age_group", ascending=False),
    palette=colors_
)
plt.title("Number of Customer by Age", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()

"""### **Berdasarkan Negara Bagian**"""

bystate_df = all_df.groupby(by="state").customer_id.nunique().reset_index()
bystate_df.rename(columns={
    "customer_id": "customer_count"
}, inplace=True)
bystate_df

plt.figure(figsize=(10, 5))
colors_ = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]
sns.barplot(
    x="customer_count",
    y="state",
    data=bystate_df.sort_values(by="customer_count", ascending=False),
    palette=colors_
)
plt.title("Number of Customer by States", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)
plt.show()

"""## **RFM Analysis** (Recency, Frequency, Monetary)

**RFM analysis** merupakan salah satu metode yang umum digunakan untuk melakukan segmentasi pelanggan (mengelompokkan pelanggan ke dalam beberapa kategori) berdasarkan tiga parameter, yaitu recency, frequency, dan monetary.
* Recency: parameter yang digunakan untuk melihat kapan terakhir seorang pelanggan melakukan transaksi.
* Frequency: parameter ini digunakan untuk mengidentifikasi seberapa sering seorang pelanggan melakukan transaksi.
* Monetary: parameter terakhir ini digunakan untuk mengidentifikasi seberapa besar revenue yang berasal dari pelanggan tersebut.
"""

rfm_df = all_df.groupby(by="customer_id", as_index=False).agg({
    "order_date": "max", #mengambil tanggal order terakhir
    "order_id": "nunique",
    "total_price": "sum"
})
rfm_df.columns = ["customer_id", "max_order_timestamp", "frequency", "monetary"]
rfm_df.head()

# menghitung kapan terakhir pelanggan melakukan transaksi (hari)
rfm_df["max_order_timestamp"] = rfm_df["max_order_timestamp"].dt.date
recent_date = orders_df["order_date"].dt.date.max()
rfm_df["recency"] = rfm_df["max_order_timestamp"].apply(lambda x: (recent_date - x).days)
rfm_df.head()

rfm_df.drop("max_order_timestamp", axis=1, inplace=True)
rfm_df.head()

rfm_df.describe()

rfm_df.sort_values(by="recency", ascending=True).head(5)

rfm_df.sort_values(by="frequency", ascending=False).head(5)

fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 6))

colors = ["#72BCD4", "#72BCD4", "#72BCD4", "#72BCD4", "#72BCD4"]

sns.barplot(y="recency", x="customer_id", data=rfm_df.sort_values(by="recency", ascending=True).head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("By Recency (days)", loc="center", fontsize=18)
ax[0].tick_params(axis ='x', labelsize=15)

sns.barplot(y="frequency", x="customer_id", data=rfm_df.sort_values(by="frequency", ascending=False).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].set_title("By Frequency", loc="center", fontsize=18)
ax[1].tick_params(axis='x', labelsize=15)

sns.barplot(y="monetary", x="customer_id", data=rfm_df.sort_values(by="monetary", ascending=False).head(5), palette=colors, ax=ax[2])
ax[2].set_ylabel(None)
ax[2].set_xlabel(None)
ax[2].set_title("By Monetary", loc="center", fontsize=18)
ax[2].tick_params(axis='x', labelsize=15)

plt.suptitle("Best Customer Based on RFM Parameters (customer_id)", fontsize=20)
plt.show()

"""**Mengurutkan customer berdasarkan recency, frequency, & monetary score**"""

rfm_df['r_rank'] = rfm_df['recency'].rank(ascending=False)
rfm_df['f_rank'] = rfm_df['frequency'].rank(ascending=True)
rfm_df['m_rank'] = rfm_df['monetary'].rank(ascending=True)

rfm_df.head()

# normalizing the rank of the customers
rfm_df['r_rank_norm'] = (rfm_df['r_rank']/rfm_df['r_rank'].max())*100
rfm_df['f_rank_norm'] = (rfm_df['f_rank']/rfm_df['f_rank'].max())*100
rfm_df['m_rank_norm'] = (rfm_df['m_rank']/rfm_df['m_rank'].max())*100

rfm_df.drop(columns=['r_rank', 'f_rank', 'm_rank'], inplace=True)

rfm_df.head()

rfm_df['RFM_score'] = 0.15*rfm_df['r_rank_norm']+0.28 * \
    rfm_df['f_rank_norm']+0.57*rfm_df['m_rank_norm']
rfm_df['RFM_score'] *= 0.05
rfm_df = rfm_df.round(2)
rfm_df[['customer_id', 'RFM_score']].head(7)

"""**Segmentasi customer berdasarkan RFM_score**"""

rfm_df["customer_segment"] = np.where(
    rfm_df['RFM_score'] > 4.5, "Top customers", (np.where(
        rfm_df['RFM_score'] > 4, "High value customer",(np.where(
            rfm_df['RFM_score'] > 3, "Medium value customer", np.where(
                rfm_df['RFM_score'] > 1.6, 'Low value customers', 'lost customers'))))))

rfm_df[['customer_id', 'RFM_score', 'customer_segment']].head(20)

customer_segment_df = rfm_df.groupby(by="customer_segment", as_index=False).customer_id.nunique()
customer_segment_df

customer_segment_df['customer_segment'] = pd.Categorical(customer_segment_df['customer_segment'], [
    "lost customers", "Low value customers", "Medium value customer",
    "High value customer", "Top customers"
])

plt.figure(figsize=(10, 5))
colors_ = ["#72BCD4", "#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(
    x="customer_id",
    y="customer_segment",
    data=customer_segment_df.sort_values(by="customer_segment", ascending=False),
    palette=colors_
)
plt.title("Number of Customer for Each Segment", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)
plt.show()

"""# TRANSFER TO CSV"""

all_df.to_csv("all_data.csv", index=False)